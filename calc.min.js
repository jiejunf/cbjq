const blocks=[[[[1,1],[1,1]]],[[[2,2,2,2]],[[2],[2],[2],[2]]],[[[3,3,0],[0,3,3]],[[0,3],[3,3],[3,0]]],[[[0,4,4],[4,4,0]],[[4,0],[4,4],[0,4]]],[[[5,0,0],[5,5,5]],[[5,5],[5,0],[5,0]],[[5,5,5],[0,0,5]],[[0,5],[0,5],[5,5]]],[[[0,0,6],[6,6,6]],[[6,6],[0,6],[0,6]],[[6,6,6],[6,0,0]],[[6,0],[6,0],[6,6]]],[[[0,7,0],[7,7,7]],[[7,7,7],[0,7,0]],[[7,0],[7,7],[7,0]],[[0,7],[7,7],[0,7]]],[[[0,8,0],[8,8,8],[0,8,0]]],[[[9]]],[[[10,10]],[[10],[10]]],[[[11,11],[11,0]],[[11,11],[0,11]],[[0,11],[11,11]],[[11,0],[11,11]]]];let row,column,solvingTable,solvingBlockNums,results,lastSolvingBlockNums;function getSortedBlockIndexes(l){return l.map(((l,e)=>({value:l,index:e}))).sort(((l,e)=>7===l.index?-1:l.index>7?1:e.value-l.value)).map((l=>l.index))}function getBlockSize(l){return-1===l?0:blocks[l][0].flat().filter((l=>l>0)).length}function getBlockUsed(l){return l.flat().reduce(((l,e)=>(l[e]?l[e]+=1:l[e]=1,l)),[]).map(((l,e)=>l/getBlockSize(e-1)))}function variance(l){let e=l.reduce(((l,e)=>l+e),0)/l.length;return l.map((l=>Math.pow(l-e,2))).reduce(((l,e)=>l+e),0)/(l.length-1)}function varianceOfResult(l,e){if(e.number)return e.number;let o=getBlockUsed(e),n=variance(l.map(((l,e)=>o[e+1]?l-o[e+1]:l)).slice(0,7));return e.number=n,n}function Solve(l,e){results=[],row=l.length,column=l[0].length,solvingTable=new Array(row);for(let e=0;e<row;++e)solvingTable[e]=l[e].map((l=>l));solvingBlockNums=e.map((l=>l));let o=[];for(let l=8;l<11;++l)o[l]=solvingBlockNums[l],solvingBlockNums[l]=0;for(;0===results.length;){if(lastSolvingBlockNums=solvingBlockNums.map((l=>l)),dfs(0),results.length){console.log("at less 1 found, end.");break}if(!o.reduce(((l,e)=>l+e))){console.log("no more special blocks, break!!");break}let l=o.indexOf(Math.max(o[8],o[9],o[10]));++solvingBlockNums[l],--o[l]}return results.sort(((l,o)=>varianceOfResult(e,l)-varianceOfResult(e,o))),results}function canPlaceBlock(l,e,o,n){const t=blocks[o][n];let r=0;for(;!t[0][r];)++r;if((e-=r)<0)return!1;for(let o=0;o<t.length;++o)for(let n=0;n<t[0].length;++n)if(t[o][n]&&(l+o>=row||e+n>=column||-1!==solvingTable[l+o][e+n]))return!1;return!0}function placeBlock(l,e,o,n,t){const r=blocks[o][n];let s=0;for(;!r[0][s];)++s;e-=s;for(let o=0;o<r.length;++o)for(let n=0;n<r[0].length;++n)r[o][n]&&(solvingTable[l+o][e+n]=t)}function dfs(l){if(l===row*column){const l=new Array(row);for(let e=0;e<row;++e)l[e]=solvingTable[e].map((l=>l));return results.push(l),results.length>=9999}const e=Math.floor(l/column),o=l%column;if(-1!==solvingTable[e][o])return dfs(l+1);for(const n of getSortedBlockIndexes(solvingBlockNums))if(solvingBlockNums[n])for(let t=0;t<blocks[n].length;++t)if(canPlaceBlock(e,o,n,t)){if(placeBlock(e,o,n,t,n+1),--solvingBlockNums[n],dfs(l+1))return!0;++solvingBlockNums[n],placeBlock(e,o,n,t,-1)}return!1}