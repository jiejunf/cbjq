let blocks=[[[[1,1],[1,1]]],[[[2,2,2,2]],[[2],[2],[2],[2]]],[[[3,3,0],[0,3,3]],[[0,3],[3,3],[3,0]]],[[[0,4,4],[4,4,0]],[[4,0],[4,4],[0,4]]],[[[5,0,0],[5,5,5]],[[5,5],[5,0],[5,0]],[[5,5,5],[0,0,5]],[[0,5],[0,5],[5,5]]],[[[0,0,6],[6,6,6]],[[6,6],[0,6],[0,6]],[[6,6,6],[6,0,0]],[[6,0],[6,0],[6,6]]],[[[0,7,0],[7,7,7]],[[7,7,7],[0,7,0]],[[7,0],[7,7],[7,0]],[[0,7],[7,7],[0,7]]],[[[0,8,0],[8,8,8],[0,8,0]]],[[[9]]],[[[10,10]],[[10],[10]]],[[[11,11],[11,0]],[[11,11],[0,11]],[[0,11],[11,11]],[[11,0],[11,11]]]];function generateBorders(e){return e.map(e=>e.map(o=>{var r=o.map(e=>e.map(()=>[]));for(let l=0;l<o.length;l++)for(let e=0;e<o[l].length;e++)0!==o[l][e]&&(0!==l&&0!==o[l-1][e]||r[l][e].push("top"),l!==o.length-1&&0!==o[l+1]?.[e]||r[l][e].push("bottom"),0!==e&&0!==o[l][e-1]||r[l][e].push("left"),e!==o[l].length-1&&0!==o[l][e+1]||r[l][e].push("right"));return r}))}let borders=generateBorders(blocks),row,column,solvingTable,solvingBlockNums,results,target8,solvingTableBorder;function getSortedBlockIndexes(e){return e.map((e,l)=>({value:e,index:l})).sort((e,l)=>7===e.index?-1:7<e.index?1:l.value-e.value).map(e=>e.index)}function getBlockSize(e){return-1===e?0:blocks[e][0].flat().filter(e=>0<e).length}function getBlockUsed(e){return e.flat().reduce((e,l)=>(e[l]?e[l]+=1:e[l]=1,e),Array(11).fill(0)).map((e,l)=>e/getBlockSize(l-1))}function variance(e){let l=e.reduce((e,l)=>e+l,0)/e.length;return e.map(e=>Math.pow(e-l,2)).reduce((e,l)=>e+l,0)/(e.length-1)}function varianceOfResult(e,l){if(l.variance)return l.variance;let o=getBlockUsed(l);e=variance(e.map((e,l)=>o[l+1]?e-o[l+1]:e).slice(0,7));return l.specialNums=o[9]??0+o[10]??0+o[11]??0,l.variance=e,l}function Solve(l,o,e=0){results=[],row=l.length,column=l[0].length,target8=e??0,solvingTable=new Array(row),solvingTableBorder=new Array(row);for(let e=0;e<row;++e)solvingTable[e]=l[e].map(e=>e),solvingTableBorder[e]=l[e].map(e=>0);solvingBlockNums=o.map(e=>e);var r=[];for(let e=8;e<11;++e)r[e]=solvingBlockNums[e],solvingBlockNums[e]=0;for(;0===results.length;){if(dfs8(0),results.length){console.log("at less 1 found, end.");break}if(!r.reduce((e,l)=>e+l,0)){console.log("no more special blocks, break!!");break}var n=r.indexOf(Math.max(r[8],r[9],r[10]));++solvingBlockNums[n],--r[n]}return results.map(e=>varianceOfResult(o,e)).sort((e,l)=>e.specialNums!==l.specialNums?e.specialNums-l.specialNums:e.variance-l.variance)}function canPlaceBlock(o,r,e,l){var n=blocks[e][l];let t=0;for(;!n[0][t];)++t;if((r-=t)<0)return!1;for(let l=0;l<n.length;++l)for(let e=0;e<n[0].length;++e)if(n[l][e]&&(o+l>=row||r+e>=column||-1!==solvingTable[o+l][r+e]))return!1;return!0}function placeBlock(o,r,e,l,n){var t=blocks[e][l],s=borders[e][l];let a=0;for(;!t[0][a];)++a;r-=a;for(let l=0;l<t.length;++l)for(let e=0;e<t[0].length;++e)t[l][e]&&(solvingTable[o+l][r+e]=n,solvingTableBorder[o+l][r+e]=-1===n?0:s[l][e])}function dfs8(e){if(e===row*column)return getBlockUsed(solvingTable)[8]>=target8&&dfs(0),9999<=results.length;var l=Math.floor(e/column),o=e%column;if(-1===solvingTable[l][o]){if(!solvingBlockNums[7])return dfs8(row*column);if(canPlaceBlock(l,o,7,0)){if(placeBlock(l,o,7,0,8),--solvingBlockNums[7],dfs8(e+1))return!0;++solvingBlockNums[7],placeBlock(l,o,7,0,-1)}}return dfs8(e+1)}function dfs(l){if(l===row*column){var o=new Array(row),r=new Array(row);for(let e=0;e<row;++e)o[e]=solvingTable[e].map(e=>e),r[e]=solvingTableBorder[e].map(e=>e);return o.borders=r,results.push(o),9999<=results.length}var n,t=Math.floor(l/column),s=l%column;if(-1!==solvingTable[t][s])return dfs(l+1);for(n of getSortedBlockIndexes(solvingBlockNums))if(solvingBlockNums[n])for(let e=0;e<blocks[n].length;++e)if(canPlaceBlock(t,s,n,e)){if(placeBlock(t,s,n,e,n+1),--solvingBlockNums[n],dfs(l+1))return!0;++solvingBlockNums[n],placeBlock(t,s,n,e,-1)}return!1}self.onmessage=e=>{var e=e.data,l={from:e.target};"Solve"===e.target&&(l.data=Solve(e.table,e.blockNums,e.block8target)),l.from&&self.postMessage(l)};