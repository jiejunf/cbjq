let blocks=[[[[1,1],[1,1]]],[[[2,2,2,2]],[[2],[2],[2],[2]]],[[[3,3,0],[0,3,3]],[[0,3],[3,3],[3,0]]],[[[0,4,4],[4,4,0]],[[4,0],[4,4],[0,4]]],[[[5,0,0],[5,5,5]],[[5,5],[5,0],[5,0]],[[5,5,5],[0,0,5]],[[0,5],[0,5],[5,5]]],[[[0,0,6],[6,6,6]],[[6,6],[0,6],[0,6]],[[6,6,6],[6,0,0]],[[6,0],[6,0],[6,6]]],[[[0,7,0],[7,7,7]],[[7,7,7],[0,7,0]],[[7,0],[7,7],[7,0]],[[0,7],[7,7],[0,7]]],[[[0,8,0],[8,8,8],[0,8,0]]],[[[9]]],[[[10,10]],[[10],[10]]],[[[11,11],[11,0]],[[11,11],[0,11]],[[0,11],[11,11]],[[11,0],[11,11]]]],row,column,solvingTable,solvingBlockNums,results,lastSolvingBlockNums;function getSortedBlockIndexes(e){return e.map((e,l)=>({value:e,index:l})).sort((e,l)=>7===e.index?-1:7<e.index?1:l.value-e.value).map(e=>e.index)}function getBlockSize(e){return-1===e?0:blocks[e][0].flat().filter(e=>0<e).length}function getBlockUsed(e){return e.flat().reduce((e,l)=>(e[l]?e[l]+=1:e[l]=1,e),[]).map((e,l)=>e/getBlockSize(l-1))}function variance(e){let l=e.reduce((e,l)=>e+l,0)/e.length;return e.map(e=>Math.pow(e-l,2)).reduce((e,l)=>e+l,0)/(e.length-1)}function varianceOfResult(e,l){if(l.number)return l.number;let o=getBlockUsed(l);e=variance(e.map((e,l)=>o[l+1]?e-o[l+1]:e).slice(0,7));return l.number=e}function Solve(l,o){results=[],row=l.length,column=l[0].length,solvingTable=new Array(row);for(let e=0;e<row;++e)solvingTable[e]=l[e].map(e=>e);solvingBlockNums=o.map(e=>e);var n=[];for(let e=8;e<11;++e)n[e]=solvingBlockNums[e],solvingBlockNums[e]=0;for(;0===results.length;){if(lastSolvingBlockNums=solvingBlockNums.map(e=>e),dfs(0),results.length){console.log("at less 1 found, end.");break}if(!n.reduce((e,l)=>e+l)){console.log("no more special blocks, break!!");break}var e=n.indexOf(Math.max(n[8],n[9],n[10]));++solvingBlockNums[e],--n[e]}return results.sort((e,l)=>varianceOfResult(o,e)-varianceOfResult(o,l)),results}function canPlaceBlock(o,n,e,l){var r=blocks[e][l];let t=0;for(;!r[0][t];)++t;if((n-=t)<0)return!1;for(let l=0;l<r.length;++l)for(let e=0;e<r[0].length;++e)if(r[l][e]&&(o+l>=row||n+e>=column||-1!==solvingTable[o+l][n+e]))return!1;return!0}function placeBlock(o,n,e,l,r){var t=blocks[e][l];let s=0;for(;!t[0][s];)++s;n-=s;for(let l=0;l<t.length;++l)for(let e=0;e<t[0].length;++e)t[l][e]&&(solvingTable[o+l][n+e]=r)}function dfs(l){if(l===row*column){var o=new Array(row);for(let e=0;e<row;++e)o[e]=solvingTable[e].map(e=>e);return results.push(o),9999<=results.length}var n,r=Math.floor(l/column),t=l%column;if(-1!==solvingTable[r][t])return dfs(l+1);for(n of getSortedBlockIndexes(solvingBlockNums))if(solvingBlockNums[n])for(let e=0;e<blocks[n].length;++e)if(canPlaceBlock(r,t,n,e)){if(placeBlock(r,t,n,e,n+1),--solvingBlockNums[n],dfs(l+1))return!0;++solvingBlockNums[n],placeBlock(r,t,n,e,-1)}return!1}self.onmessage=e=>{var e=e.data,l={from:e.target};"Solve"===e.target&&(l.data=Solve(e.table,e.blockNums)),l.from&&self.postMessage(l)};